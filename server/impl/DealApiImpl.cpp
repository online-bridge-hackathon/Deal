/**
* Deal
* # Introduction A web service that accepts request by APIs and returns 1+ bridge deals  # OpenAPI Specification This API is documented in **OpenAPI format**  # Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.  # Authentication  Forms of authentication:   - API Key
*
* The version of the OpenAPI document: 0.0.1
* Contact: support@example.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include <DealApiImpl.h>
#include <BoardList.h>

#include <stdio.h>
#include <wwdeal.h>
#include <pistache/base64.h>
#include <pistache/optional.h>
#include <pistache/http_header.h>
#include <nlohmann/json.hpp>
#include <list>
#include <string>


namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

#define MAX_BOARDS   (1024)

DealApiImpl::DealApiImpl(std::shared_ptr<Pistache::Rest::Router> rtr)
    : DealApi(rtr)
    { }

void DealApiImpl::get_deal(const Pistache::Optional<std::string> &seed, const Pistache::Optional<int32_t> &session, const Pistache::Optional<int32_t> &event, const Pistache::Optional<int32_t> &firstBoard, const Pistache::Optional<int32_t> &numberOfBoards, Pistache::Http::ResponseWriter &response) {
   uint8_t key[32] = {0};

   if (seed.isEmpty()) {
      FILE *f = fopen("/dev/urandom", "rb");
      fread(key, 1, 32, f);
      fclose(f);
   }
   else {
      Base64Decoder b64decode(seed.get());
      const std::vector<std::byte> &decoded = b64decode.Decode();
      size_t len = decoded.size();
      if (len > sizeof(key)) len = sizeof(key);
      memcpy(key, decoded.data(), len);
   }

   uint32_t session_ = session.getOrElse(1);
   uint64_t event_ = event.getOrElse(1);
   uint32_t firstBoard_ = firstBoard.getOrElse(1);
   uint32_t boards = numberOfBoards.getOrElse(32);
   if (boards > MAX_BOARDS) boards = MAX_BOARDS;

//   for (int i = 0; i < 32; i++) printf("%02x", key[i]);
//   printf(" %d %ld %d %d\n", session_, event_, firstBoard_, boards);

   nlohmann::json deals;

   for (int i = firstBoard_; i < firstBoard_ + boards; i++) {
      char uuid[25] = {0};
      deal_uid_t deal_uid = ww_deal(key, event_, session_, i);
      ww_deal_to_uuid(deal_uid, uuid);
      deals.push_back(std::string(uuid));
   }

   // ACCESS CONTROL ALLOW ORIGIN (CORS)
   response.headers().template add<Pistache::Http::Header::AccessControlAllowOrigin>("*");
   response.send(Pistache::Http::Code::Ok, deals.dump(), MIME(Application, Json));
}

}
}
}
}

